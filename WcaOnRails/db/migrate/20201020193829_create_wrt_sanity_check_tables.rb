# frozen_string_literal: true

class CreateWrtSanityCheckTables < ActiveRecord::Migration[5.2]
  def change
    create_table :sanity_check_categories do |t|
      t.string :name
    end
    create_table :sanity_checks do |t|
      t.integer :sanity_check_category_id
      t.string :topic
      t.text :comments
      t.text :query
    end
    create_table :sanity_check_exclusions do |t|
      t.integer :sanity_check_id
      t.json :exclusion
      t.text :comments
    end

    execute <<-SQL
      INSERT INTO sanity_check_categories (name) values 
        ('Person Data Irregularities'),
        ('Irregular Results'),
        ('Duplicate Results'),
        ('WCA-ID Irregularities'),
        ('Duplicate Scrambles'),
        ('Invalid Scrambles'),
        ('Competition Data Irregularities'),
        ('User Data Irregularities'),
        ('Suspicious Rounds Data'),
        ('Consistency of Results & Persons'),
        ('Consistency of Results & Scrambles'),
        ('Consistency of Results & Rounds Data');
    SQL

    execute <<-SQL
      INSERT INTO sanity_checks (sanity_check_category_id, topic, comments, query) values 
        (1, 'Names with numbers', NULL, "SELECT * FROM Persons WHERE name REGEXP '[0-9]'"),
        (1, 'Lowercase first names', NULL, "SELECT * FROM Persons WHERE BINARY name REGEXP '^[a-z]'"),
        (1, 'Lowercase last names (without local name)', NULL, "SELECT * FROM Persons WHERE BINARY MID(REVERSE(name), LOCATE(' ', REVERSE(name))-1,1) <> UPPER(MID(REVERSE(name), LOCATE(' ', REVERSE(name))-1,1))"),
        (1, 'Lowercase last names (with local name)', NULL, "SELECT * FROM Persons WHERE name LIKE '%(%' AND BINARY MID(REVERSE(LEFT(name, LOCATE('(',name)-2)), LOCATE(' ', REVERSE(LEFT(name, LOCATE('(',name)-2)))-1,1) <> UPPER(MID(REVERSE(LEFT(name, LOCATE('(',name)-2)), LOCATE(' ', REVERSE(LEFT(name, LOCATE('(',name)-2)))-1,1))"),
        (1, 'Bad local names (roman characters in brackets)', NULL, "SELECT * FROM Persons WHERE BINARY name REGEXP '[(].*[A-Za-z]+'"),
        (1, 'Missing one bracket for local names', NULL, "SELECT * FROM Persons WHERE (name LIKE '%(%' OR name LIKE '%)') AND name NOT LIKE '%(%)%'"),
        (1, 'Trailing spaces in names or local names', NULL, "SELECT * FROM Persons WHERE name LIKE ' %' OR name LIKE '% ' OR name LIKE '%( %' OR name LIKE '% )'"),
        (1, 'Cyrillic/Greek alphabet used instead of Latin', NULL, "SELECT * FROM Persons WHERE name REGEXP '[А-ЯІΑ-Ω].*[(]' OR (name REGEXP '[А-ЯІΑ-Ω]' AND name NOT REGEXP '[(]')"),
        (1, 'Person rows with empty string gender', "Valid gender values are 'm', 'f', 'o' and NULL. Empty strings as value always indicate a problem (e.g. 'o' not transfered correctly, missed entry of person data, etc.) to be investigated individually.", "SELECT * FROM Persons WHERE gender=''"),
        (1, 'Invalid countryIds', NULL, "SELECT p.id, subId, p.name, countryId FROM Persons AS p LEFT JOIN Countries AS c ON p.countryId = c.id WHERE c.id is NULL"),
        (1, 'Bogus DOBs (DOBs with year outside of reasonable range)', "DOB's other then 00-00-0000 that are clearly not valid. 0002-11-30 is the java error that can occur whenever 0 is entered as DOB.", "SELECT R.personId, MIN(C.year - P.year) AS min_age, MAX(C.year - P.year) AS max_age, GROUP_CONCAT(C.id) as suspicious_competitions FROM Results R INNER JOIN Competitions C ON R.competitionId = C.id INNER JOIN Persons P on P.id = R.personId WHERE P.year > 0 AND (C.year - P.year < 3 OR C.year - P.year > 90) GROUP BY R.personId"),
        (1, 'Missing DOBs at scale (competitions after 2018 with at least 3 missing DOBs)', "Identification of competitions with many missing DOBs (indicating a systematic issue). Findings should be discussed in the competition's result thread.", "SELECT competitionId, count(distinct personId) as missingDOBs FROM Results INNER JOIN Persons ON Results.personId=Persons.id WHERE Persons.year=0 AND RIGHT(competitionId,4) > 2018 GROUP BY competitionId HAVING missingDOBs >= 3 ORDER BY missingDOBs DESC"),
        (2, 'Results with empty first solve', NULL, "SELECT * FROM Results WHERE value1=0"),
        (2, 'Wrong number of results (for non-combined rounds)', NULL, "SELECT * FROM Results as r INNER JOIN Formats as f ON r.formatId = f.id WHERE r.roundTypeId not in ('c', 'd', 'e', 'g', 'h') AND f.expected_solve_count <> IF(value1<>0,1,0) + IF(value2<>0,1,0) + IF(value3<>0,1,0) + IF(value4<>0,1,0) + IF(value5<>0,1,0)"),
        (2, 'Rounds with more than two (rounds with cutoff) / one (rounds without cutoff) different numbers of results (competitions with year >= 2013)', NULL, "SELECT competitionId, eventId, roundTypeId, COUNT(solves) as num_results FROM (SELECT DISTINCT competitionId, eventId, roundTypeId, IF(value1<>0,1,0) + IF(value2<>0,1,0) + IF(value3<>0,1,0) + IF(value4<>0,1,0) + IF(value5<>0,1,0) as solves FROM Results WHERE RIGHT(competitionId, 4) >= 2013) re GROUP BY competitionId, eventId, roundTypeId HAVING IF(roundTypeId in ('c', 'd', 'e', 'g', 'h'), num_results > 2, num_results > 1) ORDER BY competitionId"),
        (2, 'Only DNS or zero results', NULL, "SELECT * FROM Results WHERE ABS(1+value1)=1 AND ABS(1+value2)=1 AND ABS(1+value3)=1 AND ABS(1+value4)=1 AND ABS(1+value5)=1"),
        (2, 'Non-zero average for rows with <= 2 attempt', NULL, "SELECT * FROM Results WHERE average <> 0 AND IF(value1<>0,1,0) + IF(value2<>0,1,0) + IF(value3<>0,1,0) + IF(value4<>0,1,0) + IF(value5<>0,1,0) <= 2"),
        (3, 'Rows with at least two identical >0 results at one competition (ignoring 333fm, 333mbo)', "An extended query to search for possible duplicate results that are not found by script 2a. 333fm is excluded for obvious reasons, 333mbo is excluded because there are many legit 333mbo/333mbf duplicates in the database.", "SELECT value1, value2, value3, value4, value5, count(*) as num_rows, GROUP_CONCAT(distinct personId) as people, GROUP_CONCAT(distinct eventId) as events, GROUP_CONCAT(distinct competitionId) as competitions FROM Results WHERE eventId not in ('333mbo', '333fm') AND IF(value1>0,1,0) + IF(value2>0,1,0) + IF(value3>0,1,0) + IF(value4>0,1,0) + IF(value5>0,1,0) > 1 GROUP BY value1, value2, value3, value4, value5 HAVING num_rows > 1 AND count(distinct competitionId) = 1"),
        (4, 'WCA-ID year is not the start year of the profiles first competition', 'Note: Changing WCA-IDs is non-trivial, please refer to "Queries / Procedures" on the WRT Spreadsheet.', "SELECT r.personId, MIN(c.year) as first_year FROM Results r INNER JOIN Competitions c ON r.competitionId=c.id GROUP BY personID HAVING first_year <> LEFT(personId,4)"),
        (5, 'Duplicates within scrambles for one competitionId', NULL, "SELECT GROUP_CONCAT(distinct competitionId) as competitions, GROUP_CONCAT(distinct eventId) AS events, GROUP_CONCAT(distinct roundTypeId) AS roundTypeIds, GROUP_CONCAT(distinct groupId) AS groupIds, scramble, count(scrambleId) AS scount, GROUP_CONCAT(scrambleId) AS scramleIds FROM (SELECT dups.scramble, scrambleId, competitionId, eventId, roundTypeId, groupId FROM (SELECT scramble FROM Scrambles WHERE eventId not in ('222', 'skewb') GROUP BY scramble HAVING count(*) > 1) dups INNER JOIN Scrambles ON dups.scramble = Scrambles.scramble) t GROUP BY scramble HAVING count(distinct competitionId) = 1 ORDER BY competitions, events, roundTypeIds, groupIds"),
        (5, 'Duplicates across multiple competitions (ignoring 222 and skewb)', "222 and skewb are excluded as there would be many duplicates otherwise (scramble space for these events is so small that duplicate across multiple competitions are expected, see discussion links for more detailed math). pyram may also have very few legit duplicates, but everything else should definitely be looked into further.", "SELECT GROUP_CONCAT(distinct competitionId) as competitions, GROUP_CONCAT(distinct eventId) AS events, GROUP_CONCAT(distinct roundTypeId) AS roundTypeIds, GROUP_CONCAT(distinct groupId) AS groupIds, scramble, count(scrambleId) AS scount, GROUP_CONCAT(scrambleId) AS scramleIds FROM (SELECT dups.scramble, scrambleId, competitionId, eventId, roundTypeId, groupId FROM (SELECT scramble FROM Scrambles WHERE eventId not in ('222', 'skewb') GROUP BY scramble HAVING count(*) > 1) dups INNER JOIN Scrambles ON dups.scramble = Scrambles.scramble) t GROUP BY scramble HAVING count(distinct competitionId) > 1 ORDER BY competitions, events, roundTypeIds, groupIds"),
        (6, 'Invalid groupIds', NULL, "SELECT distinct groupId FROM Scrambles WHERE CAST(groupId AS BINARY) NOT REGEXP '^[A-Z]+$'"),
        (6, 'Scrambles with leading or trailing spaces', NULL, "SELECT * FROM Scrambles WHERE LENGTH(scramble) != LENGTH(TRIM(scramble))"),
        (6, 'Wrong number of scrambles', NULL, "SELECT c.start_date, s.competitionId, s.eventId, s.roundTypeId, s.groupId, s.scramble_num, r.formatId, f.expected_solve_count FROM (SELECT competitionId, eventId, roundTypeId, groupId, count(*) as scramble_num FROM Scrambles WHERE isExtra=0 GROUP BY competitionId, eventId, roundTypeId, groupId) AS s INNER JOIN (SELECT distinct competitionId, roundTypeId, formatId, eventId FROM Results) AS r ON s.competitionId = r.competitionId AND s.roundTypeId = r.roundTypeId AND s.eventid = r.eventId INNER JOIN Formats as f ON r.formatId = f.id INNER JOIN Competitions as c ON s.competitionId = c.id WHERE scramble_num <> f.expected_solve_count ORDER BY start_date DESC"),
        (7, 'Lowercase competitionIds', NULL, "SELECT id FROM Competitions WHERE announced_at is not NULL and BINARY id REGEXP '^[a-z]'"),
        (7, 'competitionIds not ending with year (or endYear)', NULL, "SELECT id, start_date, end_date FROM Competitions WHERE announced_at is not NULL AND RIGHT(id,4) <> year AND RIGHT(id,4) <> endYear"),
        (7, 'Non-public Results (incomplete posting)', NULL, "SELECT id FROM Competitions WHERE results_posted_by IS NULL AND announced_at IS NOT NULL AND id IN (SELECT competitionId FROM Results)"),
        (8, 'Non-existing claimed WCA-IDs', "Finding and fixing claimed WCA-IDs that - for any reason - do no longer exist. This should technically not happen, so some research will be needed for each finding.", "SELECT * FROM users where wca_id not in (SELECT id FROM Persons)"),
        (8, 'Inconsistent name in users table', NULL, "SELECT p.id, p.name as profile_name, u.name as account_name FROM Persons p INNER JOIN users u ON p.id=u.wca_id AND p.name<>u.name AND p.subId=1"),
        (9, 'Time limit < cutoff', NULL, "SELECT ce.competition_id, ce.event_id, CONVERT(MID(ro.time_limit, 17, 10), UNSIGNED INTEGER) time_limit, CONVERT(MID(ro.cutoff, 39, 10), UNSIGNED INTEGER) cutoff FROM (SELECT * FROM rounds WHERE time_limit is not NULL and cutoff is not NULL) as ro INNER JOIN competition_events as ce on ce.id = ro.competition_event_id INNER JOIN (SELECT id FROM Competitions WHERE announced_at is not NULL) as comps ON ce.competition_id = comps.id HAVING time_limit> 0 and time_limit < cutoff"),
        (9, 'Cutoff < 5 seconds', "omits 333fm as this would give many false positives", "SELECT ce.competition_id, ce.event_id, CONVERT(MID(ro.cutoff, 39, 10), UNSIGNED INTEGER) cutoff FROM (SELECT * FROM rounds WHERE cutoff is not NULL) as ro INNER JOIN (SELECT * FROM competition_events WHERE event_id <> '333fm') as ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT id FROM Competitions WHERE announced_at is not NULL) as comps ON ce.competition_id = comps.id HAVING cutoff < 500"),
        (9, 'Cutoff > 10 minutes', "333mbf as this would give many false positives", "SELECT ce.competition_id, ce.event_id, CONVERT(MID(ro.cutoff, 39, 10), UNSIGNED INTEGER) cutoff FROM (SELECT * FROM rounds WHERE cutoff is not NULL) as ro INNER JOIN (SELECT * FROM competition_events WHERE event_id <> '333mbf') as ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT id FROM Competitions WHERE announced_at is not NULL) as comps ON ce.competition_id = comps.id HAVING cutoff > 60000"),
        (9, 'Time limit < 10 seconds', NULL, "SELECT ce.competition_id, ce.event_id, CONVERT(MID(ro.time_limit, 17, 10), UNSIGNED INTEGER) time_limit FROM (SELECT * FROM rounds WHERE time_limit is not NULL) as ro INNER JOIN competition_events as ce on ce.id = ro.competition_event_id INNER JOIN (SELECT id FROM Competitions WHERE announced_at is not NULL) as comps ON ce.competition_id = comps.id HAVING time_limit < 1000"),
        (9, 'Time limit > 10 minutes for "fast events"', 'is restricted to a selection of "fast events" as there would be a huge number of false positives otherwise.', "SELECT ce.competition_id, ce.event_id, CONVERT(MID(ro.time_limit, 17, 10), UNSIGNED INTEGER) time_limit FROM (SELECT * FROM rounds WHERE time_limit is not NULL) as ro INNER JOIN (SELECT * FROM competition_events WHERE event_id in ('333', '222', '444', '333oh', 'clock', 'mega', 'pyram', 'skewb', 'sq1') ) as ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT id FROM Competitions WHERE announced_at is not NULL) as comps ON ce.competition_id = comps.id HAVING time_limit> 60000"),
        (10, 'Persons table entries without Results table entry', NULL, "SELECT * FROM Persons WHERE id NOT IN (SELECT personId FROM Results)"),
        (10, 'Results table entries without Persons table entry', NULL, "SELECT * FROM Results WHERE personId NOT IN (SELECT id FROM Persons)"),
        (11, 'Round in Scrambles with no results (but with competitionId in Results)', NULL, "SELECT distinct s.competitionId, s.eventId, s.roundTypeId FROM (SELECT distinct competitionId, eventId, roundTypeId FROM Scrambles) as s LEFT JOIN (SELECT distinct competitionId FROM Results) as r_comps ON s.competitionId = r_comps.competitionId LEFT JOIN (SELECT distinct competitionId, eventId, roundTypeId FROM Results) as r_rounds ON s.competitionId = r_rounds.competitionId AND s.eventId = r_rounds.eventId AND s.roundTypeId = r_rounds.roundTypeId WHERE r_comps.competitionId is not NULL AND r_rounds.competitionId is NULL ORDER BY s.competitionId, s.eventId, s.roundTypeId"),
        (11, 'Rounds with results but no scrambles (but with competitionId in Scrambles)', NULL, "SELECT distinct r.competitionId, r.eventId, r.roundTypeId FROM (SELECT distinct competitionId, eventId, roundTypeId FROM Results) as r LEFT JOIN (SELECT distinct competitionId FROM Scrambles) as s_comps ON r.competitionId = s_comps.competitionId LEFT JOIN (SELECT distinct competitionId, eventId, roundTypeId FROM Scrambles) as s_rounds ON r.competitionId = s_rounds.competitionId AND r.eventId = s_rounds.eventId AND r.roundTypeId = s_rounds.roundTypeId WHERE s_comps.competitionId is not NULL AND s_rounds.competitionId is NULL ORDER BY r.competitionId, r.eventId, r.roundTypeId"),
        (12, 'Events missing from competition_events', NULL, "SELECT DISTINCT ce.id, competitionId, eventId FROM Results r LEFT JOIN competition_events ce ON r.competitionId=ce.competition_id AND r.eventId=ce.event_id HAVING ce.id is NULL"),
        (12, 'Unmatching number of events between Results and competition_events', NULL, "SELECT competitionId, IFNULL(ce_number_of_events, 0) ce_number_of_events, results_number_of_events FROM (SELECT competition_id, COUNT(*) ce_number_of_events FROM competition_events GROUP BY competition_id) cee RIGHT JOIN (SELECT competitionId, COUNT(DISTINCT eventId) results_number_of_events FROM Results GROUP BY competitionId) re ON cee.competition_id=re.competitionId HAVING ce_number_of_events<>results_number_of_events"),
        (12, 'No rounds marked for events', NULL, "SELECT ce.id, ce.competition_id, ce.event_id, ro.id FROM competition_events ce LEFT JOIN rounds ro ON ce.id=ro.competition_event_id JOIN Competitions c ON ce.competition_id=c.id WHERE confirmed_at is NOT NULL AND cancelled_by is not NULL HAVING ro.id is NULL"),
        (12, 'Unmatching number of rounds between Results and rounds', NULL, "SELECT distinct RIGHT(competition_id, 4) as year, competition_id, event_id, rounds_rounds, result_rounds, id_list, IF(rounds_rounds < result_rounds, 'rounds entry missing', 'excessive rounds entry') as problem_case FROM competition_events as ce INNER JOIN (SELECT competition_event_id, count(*) as rounds_rounds FROM rounds GROUP BY competition_event_id) as ro ON ce.id=ro.competition_event_id INNER JOIN (SELECT competitionId, eventId, count(*) as result_rounds, GROUP_CONCAT(roundTypeId ORDER BY roundTypeId SEPARATOR ', ') as id_list FROM (SELECT distinct competitionId, eventId, roundTypeId FROM Results) t GROUP BY competitionId, eventId) as res ON ce.competition_id=res.competitionId AND ce.event_id=res.eventId AND rounds_rounds <> result_rounds ORDER BY year, problem_case, competition_id, event_id"),
        (12, 'Format mismatches between Results and rounds', NULL, "SELECT ce.competition_id, ce.event_id, re.roundTypeId, re.formatId, ro.id, ro.format_id FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT DISTINCT competitionId, eventId, roundTypeId, formatId FROM Results) re ON re.competitionId = ce.competition_id AND re.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN re.roundTypeId IN ('c', 'f') WHEN 0 THEN re.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN re.roundTypeId IN ('1', 'd') WHEN 2 THEN re.roundTypeId IN ('2', 'e') WHEN 3 THEN re.roundTypeId IN ('3', 'g') END) WHERE re.formatId <> ro.format_id"),
        (12, 'Inconsistent scramble counts in Scrambles table and rounds table', NULL, "SELECT ce.competition_id, ce.event_id, ro.number, ro.scramble_set_count as roundsScrambleCount, ScramblesScrambleCount FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT competitionId, eventId, roundTypeId, COUNT(*) as ScramblesScrambleCount FROM (SELECT DISTINCT competitionId, eventId, roundTypeId, groupId FROM Scrambles) t GROUP BY competitionId, eventId, roundTypeId) sc ON sc.competitionId = ce.competition_id AND sc.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN sc.roundTypeId IN ('c', 'f') WHEN 0 THEN sc.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN sc.roundTypeId IN ('1', 'd') WHEN 2 THEN sc.roundTypeId IN ('2', 'e') WHEN 3 THEN sc.roundTypeId IN ('3', 'g') END) WHERE ro.scramble_set_count <> ScramblesScrambleCount"),
        (12, 'Non-cutoff roundTypeIds with cutoffs in schedule', NULL, "SELECT distinct RIGHT(competition_id, 4) as year, ce.competition_id, ce.event_id, re.roundTypeId, ro.number as round_number, ro.cutoff FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT DISTINCT competitionId, eventId, roundTypeId FROM Results) re ON re.competitionId = ce.competition_id AND re.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN re.roundTypeId IN ('c', 'f') WHEN 0 THEN re.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN re.roundTypeId IN ('1', 'd') WHEN 2 THEN re.roundTypeId IN ('2', 'e') WHEN 3 THEN re.roundTypeId IN ('3', 'g') END) WHERE roundTypeId not in ('c', 'd', 'e', 'g', 'h') AND cutoff is not NULL ORDER BY year, competition_id, event_id, round_number"),
        (12, 'Cutoff roundTypeIds with NULL cutoff', NULL, "SELECT distinct RIGHT(competition_id, 4) as year, ce.competition_id, ce.event_id, re.roundTypeId, ro.number as round_number, ro.cutoff FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT DISTINCT competitionId, eventId, roundTypeId FROM Results) re ON re.competitionId = ce.competition_id AND re.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN re.roundTypeId IN ('c', 'f') WHEN 0 THEN re.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN re.roundTypeId IN ('1', 'd') WHEN 2 THEN re.roundTypeId IN ('2', 'e') WHEN 3 THEN re.roundTypeId IN ('3', 'g') END) WHERE roundTypeId in ('c', 'd', 'e', 'g', 'h') AND cutoff is NULL ORDER BY year, competition_id, event_id, round_number"),
        (12, 'Cutoff violations', NULL, "SELECT RIGHT(competition_id, 4) AS year, TRIM(TRAILING '}' FROM (REVERSE(SUBSTRING_INDEX(REVERSE(cutoff), ':', 1)))) AS attemptResult, RIGHT(SUBSTRING_INDEX(cutoff, ',', 1), 1) AS numberOfAttempts, ro.cutoff, ce.competition_id, ce.event_id, re.roundTypeId, r.formatId, r.pos, r.personId, r.personName, r.value1, r.value2, r.value3, r.value4, r.value5, r.best, r.average FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT DISTINCT competitionId, eventId, roundTypeId FROM Results) re ON re.competitionId = ce.competition_id AND re.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN re.roundTypeId IN ('c', 'f') WHEN 0 THEN re.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN re.roundTypeId IN ('1', 'd') WHEN 2 THEN re.roundTypeId IN ('2', 'e') WHEN 3 THEN re.roundTypeId IN ('3', 'g') END) JOIN Results r ON ce.competition_id=r.competitionId AND ce.event_id=r.eventId AND re.roundTypeId=r.roundTypeId HAVING IF(cutoff IS NULL, IF(formatId IN ('a', 'm'), IF(formatId='m', (value2=0 OR value3=0), (value2=0 OR value3=0 OR value4=0 OR value5=0)), (formatId=2 AND value2=0) OR (formatId=3 AND (value2=0 OR value3=0))), CASE WHEN numberOfAttempts=1 THEN (value1<attemptResult AND value1>=0 AND value2=0) OR ((value1>=attemptResult OR value1<0) AND (value2<>0 OR value3<>0 OR value4<>0 OR value5<>0)) WHEN numberOfAttempts=2 THEN (((value1<attemptResult AND value1>0) OR (value2<attemptResult AND value2>0)) AND value3=0) OR ((value1>=attemptResult OR value1<0) AND (value2>=attemptResult OR value2<0) AND (value3<>0 OR value4<>0 OR value5<>0)) WHEN numberOfAttempts=3 THEN (((value1<attemptResult AND value1>0) OR (value2<attemptResult AND value2>0) OR (value3<attemptResult AND value3>0)) AND value4=0) OR ((value1>=attemptResult OR value1<0) AND (value2>=attemptResult OR value2<0) AND (value3>=attemptResult OR value3<0) AND (value4<>0 OR value5<>0)) END OR formatId=1)"),
        (12, 'Time limit violations within one round', NULL, "SELECT ro.id, REVERSE(SUBSTRING_INDEX(REVERSE(SUBSTRING_INDEX(time_limit, ',', 1)), ':', 1)) AS timeLimit, IF(time_limit LIKE '%[]%', false, true) AS cumulative, IF(value1<0,0,value1)+IF(value2<0,0,value2)+IF(value3<0,0,value3)+IF(value4<0,0,value4)+IF(value5<0,0,value5) AS sumOfSolves, ce.competition_id, ce.event_id, re.roundTypeId, ro.time_limit, r.formatId, r.pos, r.personId, r.personName, r.value1, r.value2, r.value3, r.value4, r.value5, r.best, r.average FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT DISTINCT competitionId, eventId, roundTypeId FROM Results WHERE RIGHT(competitionId, 4) >= 2013) re ON re.competitionId = ce.competition_id AND re.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN re.roundTypeId IN ('c', 'f') WHEN 0 THEN re.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN re.roundTypeId IN ('1', 'd') WHEN 2 THEN re.roundTypeId IN ('2', 'e') WHEN 3 THEN re.roundTypeId IN ('3', 'g') END) JOIN Results r ON ce.competition_id=r.competitionId AND ce.event_id=r.eventId AND re.roundTypeId=r.roundTypeId WHERE time_limit IS NOT NULL AND time_limit NOT LIKE '%[%,%]%' HAVING IF(time_limit LIKE '%[]%', value1>=timeLimit OR value2>=timeLimit OR value3>=timeLimit OR value4>=timeLimit OR value5>=timeLimit, sumOfSolves>=timeLimit)"),
        (12, 'Time limit violations over multiple rounds with shared time limit', NULL, "SELECT GROUP_CONCAT(ro.id) as rounds_ids, COUNT(*) AS noOfRounds, SUM(IF(value1<0,0,value1)+IF(value2<0,0,value2)+IF(value3<0,0,value3) +IF(value4<0,0,value4)+IF(value5<0,0,value5)) AS sumOfSolves, REVERSE(SUBSTRING_INDEX(REVERSE(SUBSTRING_INDEX(time_limit, ',', 1)), ':', 1)) AS timeLimit, ce.competition_id, ro.time_limit, r.personId FROM rounds ro INNER JOIN competition_events ce ON ce.id = ro.competition_event_id INNER JOIN (SELECT DISTINCT competitionId, eventId, roundTypeId FROM Results WHERE RIGHT(competitionId, 4) >= 2013) re ON re.competitionId = ce.competition_id AND re.eventId = ce.event_id AND (CASE ro.number WHEN ro.total_number_of_rounds THEN re.roundTypeId IN ('c', 'f') WHEN 0 THEN re.roundTypeId IN ('0', 'b', 'h') WHEN 1 THEN re.roundTypeId IN ('1', 'd') WHEN 2 THEN re.roundTypeId IN ('2', 'e') WHEN 3 THEN re.roundTypeId IN ('3', 'g') END) JOIN Results r ON ce.competition_id=r.competitionId AND ce.event_id=r.eventId AND re.roundTypeId=r.roundTypeId WHERE time_limit IS NOT NULL AND time_limit LIKE '%[%,%]%' GROUP BY personId, competition_id, time_limit HAVING sumOfSolves>=timeLimit");
    SQL

    execute <<-SQL
      INSERT INTO sanity_check_exclusions (sanity_check_id, exclusion, comments) values 
        (18, '{"competitions": "ChennaiCubeChallenge2009", "events": "333", "people": "2009KUMA04,2009MURA05", "value1": "8825", "value2": "7897", "value3": "-2", "value4": "-2", "value5": "-2"}', 'is impossible to determine and will just be kept'),
        (18, '{"competitions": "SlovakianOpen2016", "events": "minx", "people": "2014NOVO01,2015NOVA04", "value1": "12531", "value2": "13852", "value3": "0", "value4": "0", "value5": "0"}', 'is aparently correct'),
        (20, '{"scramleIds": "299004,298955"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299000,298951"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299001,298952"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299006,298957"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299005,298956"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "298954,299003"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "298953,299002"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299012,298963"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299009,298960"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "298961,299010"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299013,298964"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299007,298958"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "299008,298959"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "298962,299011"}', 'same scrambles were used for 3x3x3 first round and final (round 3) by accident. The Board approved the results at the time.'),
        (20, '{"scramleIds": "413274,411998"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "413273,411997"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "413275,411999"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "412000,413276"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "413271,411995"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "413272,411996"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "413270,411994"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624562,618865"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624560,618863"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624561,618864"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624558,618861"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624559,618862"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624563,618866"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (20, '{"scramleIds": "624557,618860"}', 'competitors late for 3x3x3 competed with OH scrambles at the same time as the regular OH competitors, therefore these scrambles are listed for both events.'),
        (21, '{"scramleIds": "913193,872329"}', 'Legit Pyraminx scramble'),
        (21, '{"scramleIds": "591396,108243"}', 'Legit Pyraminx scramble'),
        (21, '{"scramleIds": "1415881,1360215"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415882,1360216"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415884,1360218"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415885,1360219"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415883,1360217"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1360214,1415880"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1360213,1415879"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415876,1360133"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1360129,1415872"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415875,1360132"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415874,1360131"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415878,1360135"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415877,1360134"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (21, '{"scramleIds": "1415873,1360130"}', 'expected issue with TNoodle RNG seeding. See discussion in Ezhou Open results thread'),
        (24, '{"competitionId": "HappySheepYear2015", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 1, "expected_solve_count": 2}', 'Delegate somehow split 1st attempts scramble over both 333mbf attempts.'),
        (24, '{"competitionId": "BayAreaSpeedcubin92016", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 2, "expected_solve_count": 3}', '2 sets for 3 attempts. Delegates cannot remember what happened and have no further scrambles available.'),
        (24, '{"competitionId": "ValborgCubing2019", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 2, "expected_solve_count": 3}', 'extra 333mbf group with less attempts.'),
        (24, '{"competitionId": "SilentSummerOrlando2019", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 1, "expected_solve_count": 2}', 'extra 333mbf group with less attempts.'),
        (24, '{"competitionId": "JonkopingSideEvents2019", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 1, "expected_solve_count": 3}', 'extra 333mbf group with less attempts.'),
        (24, '{"competitionId": "CampeonatoBrasileiro2019", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 1, "expected_solve_count": 2}', 'used extra 333mbf group due to 4b4.'),
        (24, '{"competitionId": "VJTIMumbaiCubeOpen2019", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 1, "expected_solve_count": 2}', 'used extra 333mbf group due to an incident.'),
        (24, '{"competitionId": "SidenBlindForserum2020", "eventId": "333mbf", "roundTypeId":"f", "scramble_num": 2, "expected_solve_count": 3}', 'used two groups for two attempts and one group for the other'),
        (25, '{"id": "chilerubik2011"}', NULL),
        (25, '{"id": "iCubeDay2017"}', NULL),
        (25, '{"id": "iCubeOpen2017"}', NULL),
        (25, '{"id": "mcubesOpen2019"}', NULL),
        (31, '{"competition_id": "LaMontagneOpen2012", "event_id": "magic"}', NULL),
        (32, '{"competition_id": "CebuOpen2009", "event_id": "777"}', NULL),
        (32, '{"competition_id": "ForgottenCultureOpen2017", "event_id": "777"}', NULL),
        (32, '{"competition_id": "ForgottenOClocksSBC2019", "event_id": "777"}', NULL),
        (32, '{"competition_id": "JawaTimur2013", "event_id": "444bf"}', NULL),
        (32, '{"competition_id": "Kuikuiltik2012", "event_id": "777"}', NULL),
        (32, '{"competition_id": "MTDSpring2017", "event_id": "444bf"}', NULL),
        (32, '{"competition_id": "MTDSpring2017", "event_id": "555bf"}', NULL),
        (34, '{"competition_id": "Leicester2013", "event_id": "333"}', NULL),
        (34, '{"competition_id": "DJOPEN2014", "event_id": "333"}', NULL),
        (34, '{"competition_id": "OleksandriiaOpen2014", "event_id": "333"}', NULL),
        (34, '{"competition_id": "SpanishChampionship2014", "event_id": "333"}', NULL),
        (34, '{"competition_id": "TaiwanSummerOpen2014", "event_id": "444"}', NULL),
        (34, '{"competition_id": "FECAPOpen2015", "event_id": "333"}', NULL),
        (34, '{"competition_id": "SPOpen2015", "event_id": "333oh"}', NULL),
        (34, '{"competition_id": "CampeonatodeCuboXeta2017", "event_id": "333"}', NULL),
        (34, '{"competition_id": "RenoFall2017", "event_id": "444"}', NULL),
        (34, '{"competition_id": "Hawaii2019", "event_id": "333oh"}', NULL),
        (34, '{"competition_id": "Hawaii2019", "event_id": "444"}', NULL);
    SQL
  end
end
